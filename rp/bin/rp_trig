#!/usr/bin/python2
import ctypes as _c
import numpy as _n
import socket as _s
import struct as _p
import threading as _t
""" STATE CONSTANTS """

# state[0]:error, state[1]:ok
STATE_IDLE   = [  6,  7]
STATE_ARMED  = [ 14, 15]
STATE_DELAY  = [ 22, 23]
STATE_SAMPLE = [114,115]
STATE_LOW    = [ 82, 83]
STATE_HIGH   = [210,211]
STATE_REPEAT = [ 50, 51]

INIT_DISARM  = 0
INIT_ON      = 1
INIT_ARM     = 3
INIT_REARM   = 7
INIT_REINIT  = 15
MAX_STATUS   = 8
MAX_SAMPLES  = 54272
class struct_rp_trig(object):
    class _Device(_c.Structure):
        _fields_=[
              ("status",_c.c_ubyte*MAX_STATUS),
              ("init",_c.c_ubyte),
              ("trig",_c.c_ubyte),
              ("clear",_c.c_ubyte),
              ("save",_c.c_ubyte),
              ("extclk",_c.c_ubyte),
              ("invert",_c.c_ubyte),
              ("gate",_c.c_ubyte),
              ("gate2",_c.c_ubyte),
              ("delay",_c.c_uint64),
              ("width",_c.c_uint64),
              ("period",_c.c_uint64),
              ("burst",_c.c_uint64),
              ("cycle",_c.c_uint64),
              ("repeat",_c.c_uint32),
              ("count",_c.c_uint32),
              ("times",_c.c_uint64*MAX_SAMPLES),
             ]
    class _Sections(_c.Structure):
        _fields_=[
              ("status",_c.c_ubyte*MAX_STATUS),
              ("control",_c.c_ubyte*8),
              ("header",_c.c_ubyte*(6*8)),
              ("times",_c.c_uint64*MAX_SAMPLES),
             ]
    def __init__(self,iface):
        self.ptr = _c.c_void_p(0)
        iface.cdll.get_rp_trig(_c.byref(self.ptr))
    @property
    def device(self):   return _c.cast(self.ptr,_c.POINTER(struct_rp_trig._Device)).contents
    @property
    def sections(self): return _c.cast(self.ptr,_c.POINTER(struct_rp_trig._Sections)).contents
    @property
    def status(self):   return tuple(self.sections.status)
    @property
    def control(self):  return tuple(self.sections.control)
    @property
    def header(self):
        d = self.device
        return (d.delay,d.width,d.period,d.burst,d.cycle,d.repeat,d.count)
    @property
    def times(self):
        d = self.device
        return d.times[0:d.count]
    def __str__(self):
        return "rp_trig"+str(d.header)
    def __repr__(self): return str(self)

""" SERVER INTERFACE """

class rp_trig(object):
    _lock = _t.Lock()
    _NULL = _c.c_void_p(None)
    @staticmethod
    def _tobyte(val):
        if not isinstance(val,int):
            value = 0;
            for ch in val: value |= 4<<ch
            return value
        return val
    @staticmethod
    def _toctypes(delay,width,period,burst,cycle,repeat,*args):
        delay  = None if delay  is None else _c.c_uint64(int(delay ))
        width  = None if width  is None else _c.c_uint64(int(width ))
        period = None if period is None else _c.c_uint64(int(period))
        burst  = None if burst  is None else _c.c_uint64(int(burst ))
        cycle  = None if cycle  is None else _c.c_uint64(int(cycle ))
        repeat = None if repeat is None else _c.c_uint32(int(repeat))
        if len(args)>0:
          count= None if args[0] is None else _c.c_uint32(int(args[0]))
          return (delay,width,period,burst,cycle,repeat,count)
        return (delay,width,period,burst,cycle,repeat)
    @staticmethod
    def _byref(*args):
        return tuple((rp_trig._NULL if a is None else _c.byref(a)) for a in args)
    def __init__(self):
        self._stop = False
        try:
            self.cdll = _c.CDLL('librp_trig_lib.so')
            self.cdll.getError.restype=_c.c_void_p
            self._error = _c.cast(self.cdll.getError(),_c.c_char_p)
            self.dev = struct_rp_trig(self)
            if self.state == STATE_IDLE[1]: self.tryExt()
        except OSError as exc:
            print('rp_trig: '+ str(exc))
            raise
    def tryExt(self):
        from time import sleep
        self.disarm()
        self.extclk(0)
        idle = self.state
        self.makeClock(1e7)
        self.extclk(1)
        self.arm()
        sleep(0.1)
        hasext = self.state != idle
        if not hasext: self.extclk(0)
        self.disarm()
        return hasext
    def arm(self):
        self.cdll.arm()
    def rearm(self):
        self.cdll.rearm()
    def disarm(self):
        self.cdll.disarm()
    def makeClock(self,delay=None,width=None,period=None,burst=None,cycle=None,repeat=None):
        args = rp_trig._toctypes(delay,width,period,burst,cycle,repeat)
        delay,width,period,burst,cycle,repeat = rp_trig._byref(*args)
        self.cdll.makeClock(delay,width,period,burst,cycle,repeat)
    def makeSequence(self,delay=None,width=None,period=None,burst=None,cycle=None,repeat=None,times=[]):
        times = _n.ascontiguousarray(times,dtype=_n.uint64)
        timref= times.ctypes.data_as(_c.POINTER(_c.c_uint64))
        args  = rp_trig._toctypes(delay,width,period,burst,cycle,repeat,len(times))
        delay,width,period,burst,cycle,repeat,count = rp_trig._byref(*args)
        self.cdll.makeSequence(delay,width,period,burst,cycle,repeat,count,timref)
    def reinit(self,delay=None):
        delay = None if delay  is None else _c.c_uint64(int(delay))
        ref   = rp_trig._NULL if delay is None else _c.byref(delay)
        self.cdll.reinit(ref)
    def trig(self):
        self.cdll.trig()
    def extclk(self,value):
        self.cdll.extclk(_c.c_int8(-1) if value else _c.c_int8(0))
    def gate(self,value=0):
        value = rp_trig._tobyte(value)
        self.cdll.gate(_c.c_uint8(value))
    def gate2(self,value=0):
        value = rp_trig._tobyte(value)
        self.cdll.gate2(_c.c_uint8(value))
    def invert(self,value=0):
        value = rp_trig._tobyte(value)
        self.cdll.invert(_c.c_uint8(value))
    @property
    def error(self):
        return str(self._error.value)
    @property
    def state(self):
        return self.cdll.getState()
    @property
    def params(self):
        args = rp_trig._toctypes(0,0,0,0,0,0,0)
        refs = rp_trig._byref(*args)
        self.cdll.getParams(*refs)
        return tuple(int(a.value) for a in args)
    def stop(self): self._stop = True
    def run(self,port):
        try: #create an AF_INET, STREAM socket (TCP)
            sock = _s.socket(_s.AF_INET, _s.SOCK_STREAM)
        except _s.error as msg:
            print 'Failed to create socket (%d): %s'%(msg[0],msg[1])
            return
        try:
            sock.bind(('', int(port)))
        except _s.error as msg:
            print 'Bind failed (%d): %s'%(msg[0],msg[1])
            return
        try:
            sock.listen(5)
        except _s.error as msg:
            print 'Listen failed (%d): %s'%(msg[0],msg[1])
            return
        self.logger = rp_trig.Logger(port+1,self)
        self.logger.start()
        try:
            while not self._stop:
                try:
                    conn, addr = sock.accept()
                    rp_trig.Handler(conn,addr,self).start()
                except KeyboardInterrupt:
                    raise
                except Exception as e:
                    print(e)
        finally:
            sock.close()
            with rp_trig._lock:
                handlers = list(rp_trig.Handler._set)
            for handler in handlers:
                handler.stop()
            self.logger.stop()
            for handler in handlers:
                handler.join()
            self.logger.join()

    class Logger(_t.Thread):
        def __init__(self,port,iface):
            super(rp_trig.Logger,self).__init__(name='logger:%d'%(port,))
            self.port = port
            self.iface = iface
            self._stop = False
            try: #create an AF_INET, DGRAM socket (UDP)
                self.sock = _s.socket(_s.AF_INET, _s.SOCK_DGRAM)
            except _s.error as msg:
                print('Logger socket init failed (%d): %s'%(msg[0],msg[1]))
                raise
        def send_control(self,control):
            try:
                self.sock.sendto(_p.pack('<BBBBBBBB',*control),('',self.port))
            except KeyboardInterrupt:
                raise
            except Exception as e:
                print(e)
        def stop(self): self._stop = True
        def run(self):
            from time import sleep
            old_control = (0,0,0,0,0,0,0,0)
            try:
                while not self._stop:
                    sleep(.01)
                    control = self.iface.dev.control
                    if not control == old_control:
                        old_control = control
                        self.send_control(control)
            finally:
                sock.close()

    class Handler(_t.Thread):
        _set = set()
        def __init__(self,conn,addr,iface):
            super(rp_trig.Handler,self).__init__(name='%s:%d'%addr)
            conn.settimeout(10)
            self.conn = conn
            self.iface = iface
            self._stop = False
            with rp_trig._lock:
                rp_trig.Handler._set.add(self)
        def stop(self): self._stop = True
        def senderror(self):
            msg = str(self.iface.error)
            self.conn.send(_p.pack('<L',len(msg))+msg)
        def run(self):
            try:
                print('%s : Connection established'%self.name)
                while not self._stop:
                    try:
                      head = self.conn.recv(7)
                      with rp_trig._lock:
                        if not head.startswith('W7X'):
                            if len(head)>0:
                                raise Exception('Invalid header "%s"'%(head,))
                            raise Exception('Connection closed')
                        length = _p.unpack('<L',head[3:])[0]
                        remaining = length+1
                        cmd = []
                        while remaining>0:
                            cmd.append(self.conn.recv(remaining+256))
                            remaining-= len(cmd[-1])
                        cmd = ''.join(cmd)
                        cmd,param = cmd[0],cmd[1:]
                        if   cmd == 'C':
                            param = tuple((None if p<0 else p) for p in _p.unpack('<qqqqql',param[:44]))
                            self.iface.makeClock(*param)
                        elif cmd == 'S':
                            args = tuple((None if p<0 else p) for p in _p.unpack('<qqqqql',param[:44]))
                            times = _n.fromstring(param[44:length],_n.uint64)
                            self.iface.makeSequence(*args,times=times)
                        elif cmd == 'A':
                            self.iface.arm()
                        elif cmd == 'R':
                            self.iface.rearm()
                        elif cmd == 'X':
                            self.iface.reinit([(None if p<0 else p) for p in _p.unpack('<q',param[:8])][0])
                        elif cmd == 'D':
                            self.iface.disarm()
                        elif cmd == 'T':
                            self.iface.trig()
                        elif cmd == 'E':
                            self.iface.extclk(_p.unpack('<b',param[0])[0])
                        elif cmd == 'G':
                            self.iface.gate(_p.unpack('<b',param[0])[0])
                        elif cmd == 'H':
                            self.iface.gate2(_p.unpack('<b',param[0])[0])
                        elif cmd == 'I':
                            self.iface.invert(_p.unpack('<b',param[0])[0])
                        elif cmd == 'c':
                            self.conn.send(_p.pack('<BBBBBBBB',*self.iface.dev.control))
                            continue
                        elif cmd == 's':
                            self.conn.send(_p.pack('<B',self.iface.state))
                            continue
                        elif cmd == 'p':
                            self.conn.send(_p.pack('<qqqqqll',*self.iface.params))
                            continue
                        elif cmd == 'e':
                            pass #only return error
                        else:
                            raise Exception('Invalid command "%s"'%(cmd,))
                        self.senderror()
                    except KeyboardInterrupt:
                        raise
                    except Exception as e:
                        print('%s : %s'%(self.name,str(e)))
                        break
            finally:
                self.conn.close()
                del(self.conn)
                with rp_trig._lock:
                    rp_trig.Handler._set.remove(self)


""" UNIT TEST """

import unittest as _u
class Test(_u.TestCase):
    def local(self):
        from time import sleep
        dev = rp_trig()
        dev.disarm();
        dev.reinit(),
        self.assertEqual(dev.error.strip(),"MAKE CLOCK: DELAY: 600000000, WIDTH: 5, PERIOD: 10, BURST: 0, CYCLE: 0, REPEAT: 0, COUNT: 1")
        sleep(.1)
        dev.disarm();
        dev.makeClock(cycle=10000000,burst=1000,repeat=5)
        self.assertEqual(dev.error.strip(),"MAKE CLOCK: DELAY: 0, WIDTH: 5, PERIOD: 10, BURST: 1000, CYCLE: 10000000, REPEAT: 5, COUNT: 1")
        self.assertEqual(dev.params,(0,5,10,1000,10000000,5,1))
        dev.makeSequence(1e6,5,10,100,1e6,3,[0,2e4,4e4,5e4,7e4,1e5])
        self.assertEqual(dev.error.strip(),"MAKE SEQUENCE: TIMES: [0, 20000, 40000, 50000, 70000, 100000],\nDELAY: 1000000, WIDTH: 5, PERIOD: 10, BURST: 100, CYCLE: 1000000, REPEAT: 3, COUNT: 6")
        dev.gate([2,4])
        dev.gate2([5])
        dev.invert([3,4])
        self.assertEqual(dev.state,STATE_IDLE[1])
        dev.arm()
        self.assertEqual(dev.state,STATE_ARMED[1])
        dev.rearm()
        self.assertEqual(dev.state,STATE_ARMED[1])
        dev.trig()
        self.assertEqual(dev.state,STATE_DELAY[1])
        sleep(1)
        self.assertEqual(dev.state,STATE_ARMED[1])
        dev.disarm()
        self.assertEqual(dev.state,STATE_IDLE[1])
    def runTest(self):
        self.local()

def test():
    import os
    suite=_u.TestSuite((Test('local'),))
    tr=_u.TextTestRunner(stream=os.sys.stderr)
    tr.run(suite)

""" EXECUTION """

if __name__=="__main__":
    import sys
    if len(sys.argv)>1:
        try:
            port = int(sys.argv[1])
            rp_trig().run(port)
        except ValueError:
            test()
    else:
        rp_trig().run(5000)

